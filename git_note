                                       ================= git short note =====================

------------------------------------------------------------------
1. git init                                       (one time needed)
2. git add .                                      (for each push needed)
3. git commit -m "your message"                   (for each push needed)

  git commit -a -m "your message"                 (short for add and commit)


4. git branch -M main
5. git remote add customRepoName gitUrl
6. git push -u customRepoName main
     git user  :
    git passwd :
-------------------------------------------------------------------
to see git commit log --> 

   git log

to see git status of branchName/file commit etc. -->
 
   git status
----------------------------- Branch --------------------------------------
To see remote branches -->
git branch -r 

To see all local and remote branches -->
git branch -a 

To see local branches -->
git branch 

Switch to a Branch That Came From a Remote Repo -->
git pull 
git checkout --track origin/my-branch-name 

Push to a Branch(Remote) or If your local branch does not exist on the remote -->
git push -u origin my-branch-name 

If your local branch already exists on the remote -->
git push 

make new branch(local) -->
git branch newBranchName

switch to branch -->
git checkout yourBranchName

git merge branch --->
git merge sourceBranch

To delete a remote branch -->
git push origin --delete my-branch-name 

To delete a local branch -->
git branch -d my-branch-name 
git branch -D my-branch-name         (--delete --force)

-------------------------------------------------------------------

check remote repo added status -->
git remote
git remote -v

clone remote repositry -->

git clone remoteRepoUrl

add remote repository -->

git remote add customRepoName repoUrl
------------------------------------------------------------------

------------------------------------------------------------------
merge remote to local -->

git pull customRepoName


push local to reomte -->

git push customRepoName master
-----------------------------------------------------------------


-----------------------------------------------------------------
to keep changes aside -->
git stash

to keep changes back -->
git stash pop

see stash list -->
git stash list

# drop top hash, stash@{0} -->
git stash drop 


# drop specific stash - see git stash list -->           
git stash drop stash@{n}  
----------------------------------------------------------------


----------------------------------------------------------------
meld (for merging) --> 

sudo apt install meld

see changes made -->

git difftool --dir-dif -y -g -t meld

merging -->

git mergetool --tool=meld

----------------------------------------------------------------
Revert to a previous commit --> 

git reset --hard commit_value

Note --> commit_value see in "git log" command output
------------------------------------------------------------------

Automatic merge failed; fix conflicts and then commit the result -->

git checkout --ours *.c
git checkout --theirs *.c
git add .
git commit -m "remote chages"
git pull origin master

After above commands run remote file changes will reflect in local project.

after conflict keep all changes -->
   
   1. See the conflict files -->
   
     git status

   2. Open file and check conflicts mark eg.

     <<<<<<<<head
     xyz

  3. remove conflicts mark manually
     git add .
     git commit -m 'merge files'
     git push -u origin main

------------------------------------------------------------------------
From your terminal, untrack the file

 git rm --cached FILENAME

 untrack all

 git rm --cached -r *



ref: 
https://stackoverflow.com/questions/161813/how-to-resolve-merge-conflicts-in-a-git-repository
https://www.howtoinstall.me/ubuntu/18-04/meld/
https://stackoverflow.com/questions/9529078/how-do-i-use-git-reset-hard-head-to-revert-to-a-previous-commit
https://www.nobledesktop.com/learn/git/git-branches
https://stackoverflow.com/questions/161813/how-do-i-resolve-merge-conflicts-in-a-git-repository












